
package CupYFlex;


import Backend.Funciones.LlamadaFuncion;
import Backend.Compilador.Simbolo;
import Backend.Expresiones.*;
import Backend.Interfaces.Expresion;
import Backend.Funciones.Parametro;
import Backend.Reproductor.Nota;
import Backend.Funciones.Nativas.Longitud;
import Backend.Funciones.Nativas.Sumarizar;
import Backend.Funciones.Nativas.Ordenar;
import Backend.Funciones.Nativas.Esperar;
import Backend.Funciones.Reproducir;
import Backend.Interfaces.Instruccion;
import Backend.Instrucciones.*;
import Backend.Instrucciones.IfElse.*;

import java.util.LinkedList;
import java_cup.runtime.*;
import CupYFlex.ErrorS;
import java.util.ArrayList;


parser code 

{:
    public void syntax_error(Symbol s){
         System.out.println(s  );
        String lexema = s.value.toString();
        int columna =  s.right;
        int fila = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }
:}

//---------->
action code {:
:}


terminal       SENTERO,SDOBLE,SBOOLEAN,SCARACTER,SCADENA,
                EXTIENDE, PISTA,BOOLF, BOOLT,KEEP,
                VAR,ARREGLO,SWITCH,DEFAULT,CASO,SALIR,PARA,MIENTRAS,HACER,CASE,CONTINUAR,VOID,
                PRINCIPAL,REPRODUCIR,ESPERAR,ORDENAR,SUMARIZAR,LONGITUD,MENSAJE,
                ASCENDENTE,DESCENDENTE,PARES,IMPARES,PRIMOS,
                IF, ELSE,
                PARABRE,PARCIERRA,CORCHETEIZ,CORCHETEDER,LLAVEABRE,LLAVECIERRA,
                CADENA,IDENTIFICADOR,DECIMAL,ENTERO,CHAR,
                MASIGUAL,SUMASUMA,MENOSMENOS,
                MAS, ASTERISCO, MENOS, DIV, MODULO, POT,
                NOIGUAL,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,ESNULO,IGUAL,
                AND,NAND,OR,NOR,XOR,NOT,
                PUNTOYCOMA,COMA,
                LN,TAB
;


terminal String UMINUS ,UMENOS;

non terminal    
                S,               F,              inicio,        cuerpoInicio,        pista,   
                asignaDeclaraVar,    tipoDefinicionVar,
                reproducir,      
                //ARREGLOS 
                decMiembroArr,   declaraArreglo, dimensionesArr, dimensionArr,      declaracionesArr, 
                declaraArr,
                tabList,                
                parametro   ,     primitivas,
                sentenciaError,    FINALERROR,
                num,             notas, parSumarizar, 
                CONTINUESENTENCE, BREAKSENTENCE,RETURNSENTENCE,ERRORSENTENCE   
            ;

non terminal DecIncremento decrementosuma;

non terminal DeclaracionFor asignacionesFor;

non terminal ArrayList<String>  listaID, extiende;

non terminal ArrayList<Expresion> listaExpresion;

non terminal ArrayList<Instruccion>  cuerpoPista,   listaSentencias, sentencias;

non terminal ArrayList<Case> caselist;

non terminal ArrayList<Parametro> declaracionParametro;

non terminal String formaOrdenar ;

non terminal Default defaultOp;

non terminal Case caseFinal;

non terminal Expresion expresion, expr,parLongitud;

non terminal Simbolo.Tipo tipos;

non terminal SentenciaIf
            //  INSTRUCCIONES CONDICIONALES 
                        sentenciaIfElse;

non terminal Instruccion
                cuerpPistaP,
                //SWITCH
                switchsentencia,           
                //FOR
                forSentencia,
                //MIENTRAS WHILE
                mientrasSentecia,
                //DOWHILE 
                hacerMientrasSentencia,  senteciaListaContinue,
                //declaracion METODO FUNCION
                MetodoFuncioDec, MetodoFuncion,  MetodoFuncionNative,
                //VARIABLES 
                declaracionVar,  declaraVar,          llamadaAsignacionSentencias,listaSentencias2TB 
;


precedence left ELSE;
precedence left OR, NOR, XOR;
precedence left AND, NAND;
precedence left IGUAL,  NOIGUAL;
precedence left  MAYORIGUAL ,  MENORIGUAL ,  MAYOR ,  MENOR ;
precedence left MAS , MENOS;
precedence left ASTERISCO, DIV, MODULO;
precedence left POT;
precedence left ESNULO;
precedence right NOT;
precedence right UMENOS; 

start with S;


S ::=                 
        pista:s                   {:RESULT= s;  System.out.println("s");:}    
        | ERRORSENTENCE LN S:s    {:RESULT= s; System.out.println("s error");:}                         
            ;

pista::=   PISTA IDENTIFICADOR:id EXTIENDE extiende:ext LN  cuerpoPista:cPista      {:RESULT= new PistaInst(id.toString(),cPista, ext );:}
            | PISTA IDENTIFICADOR:id LN cuerpoPista:cPista                            {:RESULT= new PistaInst(id.toString(),cPista, null );:}
            | PISTA ERRORSENTENCE  EXTIENDE extiende:ext LN  cuerpoPista:cPista     {:RESULT= new PistaInst(null,cPista, ext );:}
            | PISTA ERRORSENTENCE LN cuerpoPista:cPista                             {:RESULT= new PistaInst(null,cPista, null );:}
        ;

extiende::= extiende:ext COMA IDENTIFICADOR:id  {: ext.add(id.toString());  
                                                   RESULT= ext;:}
            |IDENTIFICADOR:id             {:ArrayList<String> ids = new ArrayList();
                                          ids.add(id.toString()); 
                                          RESULT = ids;  :}
;


cuerpoPista::=   cuerpoPista:cuerpo LN cuerpPistaP:cuerpoP LN      {:
                                                                    cuerpo.add(cuerpoP);
                                                                    RESULT= cuerpo;
                                                                :}
                |cuerpPistaP:cuerpoP                         {:ArrayList<Instruccion> sentencias = new ArrayList();
                                                                 sentencias.add(cuerpoP);   
                                                                RESULT = sentencias;
                                                                :}
;


cuerpPistaP::=        MetodoFuncioDec:fun           {:System.out.println("cuerpPistaP-MetodoFuncioDec"); RESULT= fun;:}
                    | TAB declaracionVar:decVar       {:System.out.println("cuerpPistaP-declaracionVar"); RESULT= decVar; :}
; 



MetodoFuncioDec::=      KEEP MetodoFuncion:met  {:  Class c = met.getClass();
                                                    if(c.getName().contains("Metodo")){
                                                        ((Metodo)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }else if(c.getName().contains("Funcion")){
                                                        ((Funcion)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }
                                                :} 
                        |MetodoFuncion:met      {:RESULT= met;:} 
;



tipos::=    SENTERO             {:RESULT=Simbolo.Tipo.STRING;:}
            |SDOBLE             {:RESULT=Simbolo.Tipo.DOUBLE;:}
            |SBOOLEAN           {:RESULT=Simbolo.Tipo.BOOL;:}
            |SCARACTER          {:RESULT=Simbolo.Tipo.CHAR;:}
            |SCADENA            {:RESULT=Simbolo.Tipo.STRING;:}   
;

tabList::=   TAB tabList 
            |TAB
;

 
decrementosuma ::=    expresion:exp SUMASUMA LN       {: RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.masmas); :}
                    | expresion:exp MENOSMENOS LN   {: RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.menosmenos); :}
                    | expresion:exp   LN                {: RESULT = new DecIncremento(exp, null); :}
;



sentencias ::=   tabList declaracionVar:sent  sentencias:sentLs   {:    ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :}       
                | tabList llamadaAsignacionSentencias:sent LN sentencias:sentLs {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :}    
                | tabList decrementosuma:sent LN sentencias:sentLs       {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :}   
                | tabList sentenciaIfElse:sent sentencias:sentLs         {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :}   
                | tabList switchsentencia:sent sentencias:sentLs         {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | tabList forSentencia:sent sentencias:sentLs            {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | mientrasSentecia:sent sentencias:sentLs                {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | hacerMientrasSentencia:sent sentencias:sentLs          {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | CONTINUESENTENCE:sent sentencias:sentLs                {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | BREAKSENTENCE:sent sentencias:sentLs                   {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                | RETURNSENTENCE:sent sentencias:sentLs                {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; :} 
                |                                                   {:  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        RESULT =instrucciones;:}
                | ERRORSENTENCE:sent LN sentencias:sentLs              {:RESULT= sentLs;:}
                |MetodoFuncionNative:funNatva  sentencias:sentLs  {:ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(funNatva);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; ;:}
                ;

listaSentencias::=   sentencias listaSentencias 
                    |sentencias
;


// VARIABLES


declaraVar::=   VAR  tipos:tip listaID:idList       {:RESULT = new Declaracion(idList,tip, false );:}
                |KEEP VAR tipos:tip listaID:idList  {:RESULT = new Declaracion(idList,tip, true );:}
;

declaracionVar ::=   declaraVar:dec  IGUAL  expresion:exp {:RESULT = new Asignacion((Declaracion)dec, exp);:}
                    |declaraVar:dec {:RESULT = (Declaracion)dec;:}
;


listaID::=  listaID:lsIds COMA IDENTIFICADOR:id {:lsIds.add(id.toString());
                                                RESULT = lsIds;:}
            |IDENTIFICADOR:id  {:ArrayList<String> ids = new ArrayList();
                             ids.add(id.toString());
                                RESULT = ids;:}
;

llamadaAsignacionSentencias::=      IDENTIFICADOR:id IGUAL expresion:exp{: RESULT = new Asignacion(id.toString(), (Expresion)exp); :}
                                    
;
//----------------------

/*  INSTRUCCIONES CONDICIONALES */

sentenciaIfElse ::=   IF PARABRE expresion:exp PARCIERRA LN sentencias:sent LN {: RESULT =  new SentenciaIf(exp, sent, null, null); :}
                    | IF PARABRE expresion:exp PARCIERRA LN sentencias:sent LN ELSE LN sentencias:sentElse LN  {: RESULT =  new SentenciaIf( exp, sent,new SentenciaElse(sentElse), null); :}
                    | IF PARABRE expresion:exp PARCIERRA LN sentencias:sent LN ELSE LN  sentenciaIfElse:sentElseIf LN{: RESULT = new SentenciaIf(exp, sent, null,new SentenciaIfElse(sentElseIf)); :}
;  
//------------
CONTINUESENTENCE ::= CONTINUAR LN    
            ;
BREAKSENTENCE ::= SALIR LN  {:RESULT= new Salir();:}
            ;
//RETURNSENTENCE ::=  return expresion:exp LN   {:RESULT new Return(exp);:}; 
 //               | return LN                   {:RESULT new Return(null);:};


//SWITCH


switchsentencia ::=  SWITCH PARABRE expresion:exp PARCIERRA LN                                  {: RESULT = new SwitchInstruccion(exp, null, null); :}
                    |SWITCH PARABRE expresion:exp PARCIERRA LN caselist:casels defaultOp:def    {: RESULT =  new SwitchInstruccion(exp, casels, def); :}
                    | SWITCH PARABRE expresion:exp PARCIERRA LN caselist:casels                 {: RESULT =  new SwitchInstruccion(exp, casels, null); :}
                    | SWITCH PARABRE expresion:exp PARCIERRA  defaultOp:def                     {: RESULT = new SwitchInstruccion(exp, null, def); :}
;

caselist::= caselist:casesF caseFinal:casef       {: 
                                        casesF.add(casef);
                                        RESULT = casesF; 
                                    :}
            | caseFinal:casef              {: ArrayList<Case> cases = new ArrayList();
                                        cases.add(casef);
                                        RESULT = cases; :}
        ;

caseFinal::=    CASE expresion:exp LN  sentencias:sent LN   {: RESULT = new Case((Expresion)exp, (ArrayList<Instruccion>)sent); :}
                ;

defaultOp::=    DEFAULT LN sentencias:sent LN      {: RESULT = new Default(sent); :}
;


//-------------------------------
//CICLOS
//FOR
forSentencia ::= PARA PARABRE asignacionesFor:asign PUNTOYCOMA expresion:expr PUNTOYCOMA decrementosuma:dec PARCIERRA  sentencias:sent LN  {: RESULT = new For(asign, expr, dec, sent); :}
            ;

asignacionesFor::=   tipos:tipo IDENTIFICADOR:id IGUAL expresion:exp         {: RESULT = new DeclaracionFor((Simbolo.Tipo)tipo, id.toString(), (Expresion)exp); :}   
                    | IDENTIFICADOR:id IGUAL expresion:exp                   {: RESULT = new DeclaracionFor(null, id.toString(), (Expresion)exp); :}
            ;

//MIENTRAS WHILE
mientrasSentecia::= MIENTRAS PARABRE expresion:expr PARCIERRA LN  sentencias:list LN     {: RESULT = new While( expr,list); :}
            ;

//DOWHILE

hacerMientrasSentencia::= HACER sentencias:list LN MIENTRAS PARABRE expresion:expr PARCIERRA  {: RESULT = new DoWhile(expr,list);  :}
;



//declaracion METODO FUNCION
 

MetodoFuncion::=      tipos:tipo IDENTIFICADOR:id PARABRE declaracionParametro:param PARCIERRA  LN sentencias:ls  {: RESULT = new Funcion(id.toString(), param, (ArrayList<Instruccion>)ls, (Simbolo.Tipo)tipo); :}
                    | tipos:tipo IDENTIFICADOR:id PARABRE PARCIERRA   LN   sentencias:ls                          {: RESULT = new Funcion(id.toString(), null,(ArrayList<Instruccion>) ls, (Simbolo.Tipo)tipo);:}
                    | VOID  IDENTIFICADOR:id PARABRE declaracionParametro:params PARCIERRA  LN sentencias:ls      {: RESULT = new Metodo(id.toString(), params,(ArrayList<Instruccion>)ls ); :}
                    | VOID  IDENTIFICADOR:id PARABRE PARCIERRA    LN  sentencias:ls                               {: RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls); :}
                    | VOID  PRINCIPAL:id PARABRE PARCIERRA   LN sentencias:ls                                     {: RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls, true); :}
; 

MetodoFuncionNative::=  REPRODUCIR PARABRE notas:nota COMA expresion:exp1 COMA expresion:exp2 COMA expresion:exp3 PARCIERRA {:RESULT = new Reproducir(nota.toString(), exp1,exp2, exp3 );:}
                        |ESPERAR PARABRE num:ms COMA num:canal PARCIERRA            {:RESULT = new Esperar((Integer)ms, (Integer)canal);:}
                        |ORDENAR PARABRE parSumarizar:exp COMA formaOrdenar:f PARCIERRA  {:RESULT = new Ordenar((Expresion)exp,f.toString());:}
                        |SUMARIZAR PARABRE parSumarizar:sum PARCIERRA               {:
                                                                                        RESULT = new Sumarizar((Expresion) sum);
                                                                                     
                                                                                    :}
                        |LONGITUD PARABRE parLongitud:sum PARCIERRA                 {:
                                                                                        RESULT = new Longitud(sum);
                                                                                    
                                                                                    :}
;

formaOrdenar::=     ASCENDENTE      {:RESULT = "ascendente";:}
                    |DESCENDENTE    {:RESULT = "descendente";:}
                    |PARES          {:RESULT = "pares";:}
                    |IMPARES        {:RESULT = "impares";:}
                    |PRIMOS         {:RESULT = "primos";:}
;

parSumarizar::=     IDENTIFICADOR:p         {:RESULT = new Identificador(p.toString(),pleft, pright);:}
                    |declaracionesArr:arr   {:RESULT = arr;:}           
;

parLongitud::=       IDENTIFICADOR:p        {: RESULT = new Identificador(p.toString(),pleft, pright);:}
                    |CADENA:cadena          {: RESULT = new Primitivo(Simbolo.Tipo.STRING, cadena.toString(),cadenaleft, cadenaright);:}
                    |declaracionesArr:arr   {:  RESULT = (Expresion) arr;:}
;

num::=  ENTERO:num      {:RESULT= Simbolo.Tipo.INT;:}
        |DECIMAL:num    {:RESULT= Simbolo.Tipo.DOUBLE;:}
;

notas::=    IDENTIFICADOR:id {:  
                    String nota = Nota.ComprobarNota(id.toString());
                    if(nota!= null){
                        RESULT = nota;
                    }else{
                        RESULT = null;//---------------
                    }
            :}
;



declaracionParametro ::=  parametro:param  COMA declaracionParametro:params     {: if(params!=null){
                                                                                        params.add((Parametro)param); 
                                                                                        RESULT = params;
                                                                                    }else{
                                                                                        RESULT= null;
                                                                                    }
                                                                                :}
                        | parametro:parametro                       {:  ArrayList<Parametro> params = new ArrayList(); 
                                                                        params.add((Parametro)parametro);
                                                                        RESULT = params;  :}
                        | sentenciaError COMA declaracionParametro:params  {: RESULT = params; :}
                        | sentenciaError  {: RESULT = null; :}
;

parametro::= tipos:tipo IDENTIFICADOR:id {: RESULT = new Parametro((Simbolo.Tipo)tipo, id.toString()); :}
             ;

//------------------------------------------    
expresion::=     expr:exp                           {:RESULT= (Expresion) exp;:}
                |primitivas:exp                     {:RESULT= (Expresion) exp;:}
;

expr ::=    MENOS expresion:der                 {: RESULT = new Operacion(der, der, Operacion.Operador.MENOS_UNARIO, derleft, derright );  :} %prec UMENOS   
            | NOT expresion:der                 {: RESULT = new Operacion(der, der, Operacion.Operador.NOT, derleft, derright );  :}
            | ESNULO expresion:der              {: RESULT = new Operacion(der, der, Operacion.Operador.NULO, derleft, derright );  :}

            | expresion:der MAS expresion:iz       {: RESULT = new Operacion(der, iz, Operacion.Operador.SUMA, derleft, derright );  :}
            | expresion:der MENOS expresion:iz     {: RESULT = new Operacion(der, iz, Operacion.Operador.RESTA, derleft, derright );  :}
            | expresion:der ASTERISCO expresion:iz {: RESULT = new Operacion(der, iz, Operacion.Operador.MULTIPLICACION, derleft, derright );  :}
            | expresion:der DIV expresion:iz       {: RESULT = new Operacion(der, iz, Operacion.Operador.DIVISION, derleft, derright ); :}
            | expresion:der POT expresion:iz       {: RESULT = new Operacion(der, iz, Operacion.Operador.POTENCIA, derleft, derright );  :}
            | expresion:der MODULO expresion:iz    {: RESULT = new Operacion(der, iz, Operacion.Operador.MODULO, derleft, derright );  :}

            | expresion:der MAYOR expresion:iz        {: RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_QUE, derleft, derright ); :}
            | expresion:der MENOR expresion:iz        {: RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_QUE, derleft, derright );  :}
            | expresion:der MAYORIGUAL expresion:iz   {: RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_IGUA_QUE, derleft, derright );  :}
            | expresion:der MENORIGUAL expresion:iz   {: RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_IGUA_QUE, derleft, derright );  :}
            | expresion:der IGUAL IGUAL expresion:iz  {: RESULT = new Operacion(der, iz, Operacion.Operador.IGUAL_IGUAL, derleft, derright );  :}
            | expresion:der NOIGUAL expresion:iz      {: RESULT = new Operacion(der, iz, Operacion.Operador.NOI_GUAL, derleft, derright );  :}

            | expresion:der AND expresion:iz          {: RESULT = new Operacion(der, iz, Operacion.Operador.AND, derleft, derright ); :}
            | expresion:der NAND expresion :iz        {: RESULT = new Operacion(der, iz, Operacion.Operador.NAND,derleft, derright ); :}
            | expresion:der OR expresion :iz           {: RESULT = new Operacion(der, iz, Operacion.Operador.OR,  derleft, derright ); :}
            | expresion:der NOR expresion:iz          {: RESULT = new Operacion(der, iz, Operacion.Operador.NOR,derleft, derright ); :}
            | expresion:der XOR expresion:iz   {: RESULT = new Operacion(der, iz, Operacion.Operador.XOR,derleft, derright ); :}
            
            | PARABRE expresion:expr PARCIERRA                     {: RESULT = expr; :}
            | IDENTIFICADOR:id PARABRE listaExpresion:e PARCIERRA  {: RESULT = (Expresion)new LlamadaFuncion(id.toString(), e);  :}
            |IDENTIFICADOR:id PARABRE PARCIERRA                    {: RESULT = (Expresion)new LlamadaFuncion(id.toString(), null); :}
;

primitivas::=   IDENTIFICADOR:p     {: RESULT = new Identificador(p.toString(), pleft, pright);              :}
                | DECIMAL:p         {: RESULT = new Primitivo(Simbolo.Tipo.DOUBLE,(Double)p, pleft, pright); :}
                | ENTERO:p          {: RESULT = new Primitivo(Simbolo.Tipo.INT,(Integer)p, pleft,pright);    :}         
                | CADENA:p          {: RESULT = new Primitivo(Simbolo.Tipo.STRING, p.toString(), pleft, pright); :}
                | CHAR:p            {: RESULT = new Primitivo(Simbolo.Tipo.CHAR,(char)p, pleft, pright);     :}
                | BOOLF:p           {: RESULT = new Primitivo(Simbolo.Tipo.BOOL,false, pleft, pright);       :}
                | BOOLT:p           {: RESULT = new Primitivo(Simbolo.Tipo.BOOL,true, pleft, pright);        :}

            ;

listaExpresion::=    listaExpresion:lsexp COMA expresion:exp    {:lsexp.add(exp);
                                                                RESULT= lsexp;:}

                    |expresion:exp                              {:ArrayList<Expresion> ex= new ArrayList();
                                                                ex.add(exp);
                                                                RESULT= ex;:}
;


ERRORSENTENCE ::=   ERRORSENTENCE FINALERROR   
                | FINALERROR    
            ;
FINALERROR ::=  error{::}
            ;