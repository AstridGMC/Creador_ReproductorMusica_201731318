
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 10 13:20:41 CST 2021
//----------------------------------------------------

package CupYFlex;

import Backend.Funciones.LlamadaFuncion;
import Backend.Compilador.Simbolo;
import Backend.Expresiones.*;
import Backend.Interfaces.Expresion;
import Backend.Funciones.Parametro;
import Backend.Reproductor.Nota;
import Backend.Funciones.Nativas.Longitud;
import Backend.Funciones.Nativas.Sumarizar;
import Backend.Funciones.Nativas.Ordenar;
import Backend.Funciones.Nativas.Esperar;
import Backend.Funciones.Reproducir;
import Backend.Interfaces.Instruccion;
import Backend.Instrucciones.*;
import Backend.Instrucciones.IfElse.*;
import java.util.LinkedList;
import java_cup.runtime.*;
import CupYFlex.ErrorS;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 10 13:20:41 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\053\003\000\002\053" +
    "\005\000\002\054\010\000\002\054\006\000\002\054\010" +
    "\000\002\054\006\000\002\035\005\000\002\035\003\000" +
    "\002\037\006\000\002\037\003\000\002\056\003\000\002" +
    "\056\004\000\002\064\004\000\002\064\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\016\004\000\002\016\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\004\000\002" +
    "\041\005\000\002\041\006\000\002\041\006\000\002\041" +
    "\005\000\002\041\005\000\002\041\005\000\002\041\004" +
    "\000\002\041\004\000\002\041\004\000\002\041\004\000" +
    "\002\041\004\000\002\041\007\000\002\041\002\000\002" +
    "\041\005\000\002\041\004\000\002\040\004\000\002\040" +
    "\003\000\002\070\005\000\002\070\006\000\002\067\005" +
    "\000\002\067\003\000\002\034\005\000\002\034\003\000" +
    "\002\071\005\000\002\055\011\000\002\055\015\000\002" +
    "\055\015\000\002\026\004\000\002\027\004\000\002\057" +
    "\007\000\002\057\011\000\002\057\010\000\002\057\007" +
    "\000\002\042\004\000\002\042\003\000\002\046\007\000" +
    "\002\045\006\000\002\060\014\000\002\033\006\000\002" +
    "\033\005\000\002\061\011\000\002\062\011\000\002\065" +
    "\011\000\002\065\010\000\002\065\011\000\002\065\010" +
    "\000\002\065\010\000\002\066\014\000\002\066\010\000" +
    "\002\066\010\000\002\066\006\000\002\066\006\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\025\003\000\002\025\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\043\005\000\002\043\003\000\002\043\005\000\002\043" +
    "\003\000\002\017\004\000\002\047\003\000\002\047\003" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\006\000\002\050" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\036\005\000\002\036\003\000\002" +
    "\031\004\000\002\031\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\006\003\005\012\010\001\002\000\010\003" +
    "\uff7f\011\uff7f\113\uff7f\001\002\000\010\003\uff7e\011\uff7e" +
    "\113\uff7e\001\002\000\004\002\u0134\001\002\000\004\002" +
    "\000\001\002\000\006\003\005\057\015\001\002\000\006" +
    "\003\005\113\013\001\002\000\010\003\uff80\011\uff80\113" +
    "\uff80\001\002\000\006\003\005\012\010\001\002\000\004" +
    "\002\uffff\001\002\000\006\011\u012e\113\u012f\001\002\000" +
    "\010\003\005\011\017\113\020\001\002\000\004\057\u0128" +
    "\001\002\000\022\004\027\005\034\006\025\007\032\010" +
    "\024\015\035\031\026\114\031\001\002\000\006\002\ufff6" +
    "\113\ufff6\001\002\000\006\002\ufffb\113\u0125\001\002\000" +
    "\004\057\u011c\001\002\000\004\057\uffee\001\002\000\004" +
    "\057\ufff0\001\002\000\006\032\152\057\151\001\002\000" +
    "\004\057\ufff2\001\002\000\006\002\ufff7\113\ufff7\001\002" +
    "\000\006\015\042\016\037\001\002\000\004\057\uffef\001" +
    "\002\000\006\002\ufff3\113\ufff3\001\002\000\004\057\ufff1" +
    "\001\002\000\016\004\027\005\034\006\025\007\032\010" +
    "\024\031\026\001\002\000\006\002\ufff4\113\ufff4\001\002" +
    "\000\014\004\027\005\034\006\025\007\032\010\024\001" +
    "\002\000\040\002\uffd4\003\uffd4\023\uffd4\025\uffd4\026\uffd4" +
    "\030\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\102\051\113\uffd4\114\uffd4\001\002\000\006\002\ufff5" +
    "\113\ufff5\001\002\000\004\016\043\001\002\000\014\004" +
    "\027\005\034\006\025\007\032\010\024\001\002\000\004" +
    "\057\046\001\002\000\042\002\uffd6\003\uffd6\023\uffd6\025" +
    "\uffd6\026\uffd6\030\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\102\uffd6\112\047\113\uffd6\114\uffd6\001" +
    "\002\000\042\002\uffd2\003\uffd2\023\uffd2\025\uffd2\026\uffd2" +
    "\030\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\102\uffd2\112\uffd2\113\uffd2\114\uffd2\001\002\000\004" +
    "\057\050\001\002\000\042\002\uffd3\003\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\030\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\102\uffd3\112\uffd3\113\uffd3\114\uffd3\001" +
    "\002\000\030\013\057\014\062\050\065\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\112\002\uff86\003\uff86\023\uff86\025\uff86\026\uff86" +
    "\030\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\051\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86" +
    "\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86\077" +
    "\uff86\100\uff86\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86" +
    "\107\uff86\111\uff86\112\uff86\113\uff86\114\uff86\001\002\000" +
    "\030\013\057\014\062\050\065\056\052\057\066\060\054" +
    "\061\060\062\067\070\055\101\053\110\063\001\002\000" +
    "\112\002\uff88\003\uff88\023\uff88\025\uff88\026\uff88\030\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\051" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88" +
    "\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100" +
    "\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88" +
    "\111\uff88\112\uff88\113\uff88\114\uff88\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\112\002" +
    "\uffa1\003\uffa1\023\uffa1\025\uffa1\026\uffa1\030\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\051\uffa1\064" +
    "\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\111\uffa1" +
    "\112\uffa1\113\uffa1\114\uffa1\001\002\000\112\002\uff84\003" +
    "\uff84\023\uff84\025\uff84\026\uff84\030\uff84\033\uff84\034\uff84" +
    "\035\uff84\036\uff84\037\uff84\040\uff84\051\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\102\uff84\103" +
    "\uff84\104\uff84\105\uff84\106\uff84\107\uff84\111\uff84\112\uff84" +
    "\113\uff84\114\uff84\001\002\000\112\002\uff87\003\uff87\023" +
    "\uff87\025\uff87\026\uff87\030\uff87\033\uff87\034\uff87\035\uff87" +
    "\036\uff87\037\uff87\040\uff87\051\uff87\064\uff87\065\uff87\066" +
    "\uff87\067\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\102\uff87\103\uff87\104" +
    "\uff87\105\uff87\106\uff87\107\uff87\111\uff87\112\uff87\113\uff87" +
    "\114\uff87\001\002\000\100\002\uffd5\003\uffd5\023\uffd5\025" +
    "\uffd5\026\uffd5\030\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\066\105\067\077\070\100\071\107\072" +
    "\112\073\103\074\102\075\106\076\101\077\104\100\075" +
    "\102\111\103\074\104\110\105\114\106\113\107\076\113" +
    "\uffd5\114\uffd5\001\002\000\112\002\uff83\003\uff83\023\uff83" +
    "\025\uff83\026\uff83\030\uff83\033\uff83\034\uff83\035\uff83\036" +
    "\uff83\037\uff83\040\uff83\051\uff83\064\uff83\065\uff83\066\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\076\uff83\077\uff83\100\uff83\102\uff83\103\uff83\104\uff83" +
    "\105\uff83\106\uff83\107\uff83\111\uff83\112\uff83\113\uff83\114" +
    "\uff83\001\002\000\030\013\057\014\062\050\065\056\052" +
    "\057\066\060\054\061\060\062\067\070\055\101\053\110" +
    "\063\001\002\000\112\002\uffa2\003\uffa2\023\uffa2\025\uffa2" +
    "\026\uffa2\030\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\051\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\001" +
    "\002\000\030\013\057\014\062\050\065\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\114\002\uff89\003\uff89\023\uff89\025\uff89\026\uff89" +
    "\030\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\050\070\051\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\100\uff89\102\uff89\103\uff89\104\uff89\105\uff89" +
    "\106\uff89\107\uff89\111\uff89\112\uff89\113\uff89\114\uff89\001" +
    "\002\000\112\002\uff85\003\uff85\023\uff85\025\uff85\026\uff85" +
    "\030\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\051\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077" +
    "\uff85\100\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85" +
    "\107\uff85\111\uff85\112\uff85\113\uff85\114\uff85\001\002\000" +
    "\032\013\057\014\062\050\065\051\071\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\112\002\uff8a\003\uff8a\023\uff8a\025\uff8a\026\uff8a" +
    "\030\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\051\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff8a\100\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a" +
    "\107\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\001\002\000" +
    "\006\051\137\112\140\001\002\000\050\051\uff81\066\105" +
    "\067\077\070\100\071\107\072\112\073\103\074\102\075" +
    "\106\076\101\077\104\100\075\102\111\103\074\104\110" +
    "\105\114\106\113\107\076\112\uff81\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\004\102" +
    "\120\001\002\000\030\013\057\014\062\050\065\056\052" +
    "\057\066\060\054\061\060\062\067\070\055\101\053\110" +
    "\063\001\002\000\030\013\057\014\062\050\065\056\052" +
    "\057\066\060\054\061\060\062\067\070\055\101\053\110" +
    "\063\001\002\000\030\013\057\014\062\050\065\056\052" +
    "\057\066\060\054\061\060\062\067\070\055\101\053\110" +
    "\063\001\002\000\112\002\uff8f\003\uff8f\023\uff8f\025\uff8f" +
    "\026\uff8f\030\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\051\uff8f\064\uff8f\065\uff8f\066\105\067\077" +
    "\070\100\071\107\072\112\073\103\074\102\075\106\076" +
    "\101\077\104\100\075\102\111\103\074\104\110\105\uff8f" +
    "\106\uff8f\107\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\001" +
    "\002\000\112\002\uff8e\003\uff8e\023\uff8e\025\uff8e\026\uff8e" +
    "\030\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\051\uff8e\064\uff8e\065\uff8e\066\105\067\077\070\100" +
    "\071\107\072\112\073\103\074\102\075\106\076\101\077" +
    "\104\100\075\102\111\103\074\104\110\105\uff8e\106\uff8e" +
    "\107\uff8e\111\uff8e\112\uff8e\113\uff8e\114\uff8e\001\002\000" +
    "\112\002\uff98\003\uff98\023\uff98\025\uff98\026\uff98\030\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\051" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\103\074\uff98\075\uff98\076\uff98\077\uff98\100" +
    "\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98" +
    "\111\uff98\112\uff98\113\uff98\114\uff98\001\002\000\030\013" +
    "\057\014\062\050\065\056\052\057\066\060\054\061\060" +
    "\062\067\070\055\101\053\110\063\001\002\000\112\002" +
    "\uff93\003\uff93\023\uff93\025\uff93\026\uff93\030\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\051\uff93\064" +
    "\uff93\065\uff93\066\105\067\077\070\100\071\107\072\112" +
    "\073\103\074\uff93\075\106\076\101\077\104\100\075\102" +
    "\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\111\uff93" +
    "\112\uff93\113\uff93\114\uff93\001\002\000\112\002\uff90\003" +
    "\uff90\023\uff90\025\uff90\026\uff90\030\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\051\uff90\064\uff90\065" +
    "\uff90\066\105\067\077\070\100\071\107\072\112\073\103" +
    "\074\102\075\106\076\101\077\104\100\075\102\111\103" +
    "\uff90\104\uff90\105\uff90\106\uff90\107\uff90\111\uff90\112\uff90" +
    "\113\uff90\114\uff90\001\002\000\112\002\uff9a\003\uff9a\023" +
    "\uff9a\025\uff9a\026\uff9a\030\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\051\uff9a\064\uff9a\065\uff9a\066" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\103\074\uff9a" +
    "\075\uff9a\076\uff9a\077\uff9a\100\uff9a\102\uff9a\103\uff9a\104" +
    "\uff9a\105\uff9a\106\uff9a\107\uff9a\111\uff9a\112\uff9a\113\uff9a" +
    "\114\uff9a\001\002\000\112\002\uff97\003\uff97\023\uff97\025" +
    "\uff97\026\uff97\030\uff97\033\uff97\034\uff97\035\uff97\036\uff97" +
    "\037\uff97\040\uff97\051\uff97\064\uff97\065\uff97\066\105\067" +
    "\077\070\100\071\107\072\112\073\103\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\102\uff97\103\uff97\104\uff97\105" +
    "\uff97\106\uff97\107\uff97\111\uff97\112\uff97\113\uff97\114\uff97" +
    "\001\002\000\112\002\uff9d\003\uff9d\023\uff9d\025\uff9d\026" +
    "\uff9d\030\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d" +
    "\040\uff9d\051\uff9d\064\uff9d\065\uff9d\066\uff9d\067\077\070" +
    "\uff9d\071\107\072\112\073\103\074\uff9d\075\uff9d\076\uff9d" +
    "\077\uff9d\100\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\111\uff9d\112\uff9d\113\uff9d\114\uff9d\001\002" +
    "\000\112\002\uff95\003\uff95\023\uff95\025\uff95\026\uff95\030" +
    "\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\051\uff95\064\uff95\065\uff95\066\105\067\077\070\100\071" +
    "\107\072\112\073\103\074\uff95\075\uff95\076\uff95\077\uff95" +
    "\100\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95\107" +
    "\uff95\111\uff95\112\uff95\113\uff95\114\uff95\001\002\000\112" +
    "\002\uff99\003\uff99\023\uff99\025\uff99\026\uff99\030\uff99\033" +
    "\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\051\uff99" +
    "\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072" +
    "\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99" +
    "\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\111" +
    "\uff99\112\uff99\113\uff99\114\uff99\001\002\000\112\002\uff92" +
    "\003\uff92\023\uff92\025\uff92\026\uff92\030\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\051\uff92\064\uff92" +
    "\065\uff92\066\105\067\077\070\100\071\107\072\112\073" +
    "\103\074\uff92\075\106\076\101\077\104\100\075\102\uff92" +
    "\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\111\uff92\112" +
    "\uff92\113\uff92\114\uff92\001\002\000\112\002\uff96\003\uff96" +
    "\023\uff96\025\uff96\026\uff96\030\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\051\uff96\064\uff96\065\uff96" +
    "\066\105\067\077\070\100\071\107\072\112\073\103\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\100\uff96\102\uff96\103\uff96" +
    "\104\uff96\105\uff96\106\uff96\107\uff96\111\uff96\112\uff96\113" +
    "\uff96\114\uff96\001\002\000\112\002\uff9c\003\uff9c\023\uff9c" +
    "\025\uff9c\026\uff9c\030\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\051\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\077\070\uff9c\071\107\072\112\073\103\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103\uff9c\104\uff9c" +
    "\105\uff9c\106\uff9c\107\uff9c\111\uff9c\112\uff9c\113\uff9c\114" +
    "\uff9c\001\002\000\112\002\uff9b\003\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\030\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\051\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\103\074\uff9b\075\uff9b\076" +
    "\uff9b\077\uff9b\100\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b" +
    "\106\uff9b\107\uff9b\111\uff9b\112\uff9b\113\uff9b\114\uff9b\001" +
    "\002\000\112\002\uff8d\003\uff8d\023\uff8d\025\uff8d\026\uff8d" +
    "\030\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\051\uff8d\064\uff8d\065\uff8d\066\105\067\077\070\100" +
    "\071\107\072\112\073\103\074\102\075\106\076\101\077" +
    "\104\100\075\102\111\103\074\104\110\105\uff8d\106\uff8d" +
    "\107\uff8d\111\uff8d\112\uff8d\113\uff8d\114\uff8d\001\002\000" +
    "\112\002\uff94\003\uff94\023\uff94\025\uff94\026\uff94\030\uff94" +
    "\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\051" +
    "\uff94\064\uff94\065\uff94\066\105\067\077\070\100\071\107" +
    "\072\112\073\103\074\uff94\075\uff94\076\uff94\077\uff94\100" +
    "\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107\uff94" +
    "\111\uff94\112\uff94\113\uff94\114\uff94\001\002\000\112\002" +
    "\uff91\003\uff91\023\uff91\025\uff91\026\uff91\030\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\051\uff91\064" +
    "\uff91\065\uff91\066\105\067\077\070\100\071\107\072\112" +
    "\073\103\074\102\075\106\076\101\077\104\100\075\102" +
    "\111\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91\111\uff91" +
    "\112\uff91\113\uff91\114\uff91\001\002\000\112\002\uff8b\003" +
    "\uff8b\023\uff8b\025\uff8b\026\uff8b\030\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\051\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b" +
    "\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\111\uff8b\112\uff8b" +
    "\113\uff8b\114\uff8b\001\002\000\030\013\057\014\062\050" +
    "\065\056\052\057\066\060\054\061\060\062\067\070\055" +
    "\101\053\110\063\001\002\000\050\051\uff82\066\105\067" +
    "\077\070\100\071\107\072\112\073\103\074\102\075\106" +
    "\076\101\077\104\100\075\102\111\103\074\104\110\105" +
    "\114\106\113\107\076\112\uff82\001\002\000\046\051\143" +
    "\066\105\067\077\070\100\071\107\072\112\073\103\074" +
    "\102\075\106\076\101\077\104\100\075\102\111\103\074" +
    "\104\110\105\114\106\113\107\076\001\002\000\112\002" +
    "\uff8c\003\uff8c\023\uff8c\025\uff8c\026\uff8c\030\uff8c\033\uff8c" +
    "\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\051\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\102" +
    "\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\111\uff8c" +
    "\112\uff8c\113\uff8c\114\uff8c\001\002\000\112\002\uff9f\003" +
    "\uff9f\023\uff9f\025\uff9f\026\uff9f\030\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\051\uff9f\064\uff9f\065" +
    "\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\102\uff9f\103" +
    "\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\111\uff9f\112\uff9f" +
    "\113\uff9f\114\uff9f\001\002\000\112\002\uffa0\003\uffa0\023" +
    "\uffa0\025\uffa0\026\uffa0\030\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\051\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0" +
    "\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\103\uffa0\104" +
    "\uffa0\105\uffa0\106\uffa0\107\uffa0\111\uffa0\112\uffa0\113\uffa0" +
    "\114\uffa0\001\002\000\112\002\uff9e\003\uff9e\023\uff9e\025" +
    "\uff9e\026\uff9e\030\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\040\uff9e\051\uff9e\064\uff9e\065\uff9e\066\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\100\uff9e\102\uff9e\103\uff9e\104\uff9e\105" +
    "\uff9e\106\uff9e\107\uff9e\111\uff9e\112\uff9e\113\uff9e\114\uff9e" +
    "\001\002\000\004\057\046\001\002\000\042\002\uffd7\003" +
    "\uffd7\023\uffd7\025\uffd7\026\uffd7\030\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\102\uffd7\112\047\113" +
    "\uffd7\114\uffd7\001\002\000\004\050\u010c\001\002\000\004" +
    "\050\153\001\002\000\004\051\154\001\002\000\004\113" +
    "\155\001\002\000\036\002\uffdc\003\005\023\156\025\174" +
    "\026\176\030\173\033\170\034\201\035\166\036\172\037" +
    "\177\040\200\113\uffdc\114\160\001\002\000\004\113\u010b" +
    "\001\002\000\006\002\uffba\113\uffba\001\002\000\044\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\020\uffec\024\uffec\046\uffec" +
    "\050\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\070" +
    "\uffec\101\uffec\110\uffec\114\160\001\002\000\006\003\005" +
    "\113\u0108\001\002\000\036\002\uffdc\003\005\023\156\025" +
    "\174\026\176\030\173\033\170\034\201\035\166\036\172" +
    "\037\177\040\200\113\uffdc\114\160\001\002\000\036\002" +
    "\uffdc\003\005\023\156\025\174\026\176\030\173\033\170" +
    "\034\201\035\166\036\172\037\177\040\200\113\uffdc\114" +
    "\160\001\002\000\036\002\uffdc\003\005\023\156\025\174" +
    "\026\176\030\173\033\170\034\201\035\166\036\172\037" +
    "\177\040\200\113\uffdc\114\160\001\002\000\036\002\uffdc" +
    "\003\005\023\156\025\174\026\176\030\173\033\170\034" +
    "\201\035\166\036\172\037\177\040\200\113\uffdc\114\160" +
    "\001\002\000\004\050\372\001\002\000\036\002\uffdc\003" +
    "\005\023\156\025\174\026\176\030\173\033\170\034\201" +
    "\035\166\036\172\037\177\040\200\113\uffdc\114\160\001" +
    "\002\000\004\050\357\001\002\000\036\002\uffdc\003\005" +
    "\023\156\025\174\026\176\030\173\033\170\034\201\035" +
    "\166\036\172\037\177\040\200\113\uffdc\114\160\001\002" +
    "\000\004\050\351\001\002\000\004\113\350\001\002\000" +
    "\004\050\342\001\002\000\042\013\057\014\062\015\042" +
    "\016\037\020\240\024\242\046\241\050\065\056\052\057" +
    "\243\060\054\061\060\062\067\070\055\101\053\110\063" +
    "\001\002\000\034\003\005\023\156\025\174\026\176\030" +
    "\173\033\170\034\201\035\166\036\172\037\177\040\200" +
    "\113\uffdc\114\160\001\002\000\004\050\216\001\002\000" +
    "\004\050\211\001\002\000\004\050\202\001\002\000\006" +
    "\060\204\061\205\001\002\000\004\112\206\001\002\000" +
    "\006\051\uffa9\112\uffa9\001\002\000\006\051\uffaa\112\uffaa" +
    "\001\002\000\006\060\204\061\205\001\002\000\004\051" +
    "\210\001\002\000\036\002\uffb8\003\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\113\uffb8\114\uffb8\001\002\000\030\013\057" +
    "\014\062\050\065\056\052\057\066\060\054\061\060\062" +
    "\067\070\055\101\053\110\063\001\002\000\044\066\105" +
    "\067\077\070\100\071\107\072\112\073\103\074\102\075" +
    "\106\076\101\077\104\100\075\102\111\103\074\104\110" +
    "\105\114\106\113\107\076\001\002\000\046\051\214\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\107\uffa2\001\002\000\036\002\uffdc" +
    "\003\005\023\156\025\174\026\176\030\173\033\170\034" +
    "\201\035\166\036\172\037\177\040\200\113\uffdc\114\160" +
    "\001\002\000\006\002\uffdd\113\uffdd\001\002\000\006\056" +
    "\222\057\217\001\002\000\004\051\uffad\001\002\000\004" +
    "\051\223\001\002\000\004\051\uffab\001\002\000\004\051" +
    "\uffac\001\002\000\036\002\uffb5\003\uffb5\023\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\113\uffb5\114\uffb5\001\002\000\004\113\225" +
    "\001\002\000\004\025\226\001\002\000\004\050\227\001" +
    "\002\000\030\013\057\014\062\050\065\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\046\051\231\066\105\067\077\070\100\071\107" +
    "\072\112\073\103\074\102\075\106\076\101\077\104\100" +
    "\075\102\111\103\074\104\110\105\114\106\113\107\076" +
    "\001\002\000\036\002\uffbf\003\uffbf\023\uffbf\025\uffbf\026" +
    "\uffbf\030\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\113\uffbf\114\uffbf\001\002\000\036\002\uffdc\003" +
    "\005\023\156\025\174\026\176\030\173\033\170\034\201" +
    "\035\166\036\172\037\177\040\200\113\uffdc\114\160\001" +
    "\002\000\036\002\uffdc\003\005\023\156\025\174\026\176" +
    "\030\173\033\170\034\201\035\166\036\172\037\177\040" +
    "\200\113\uffdc\114\160\001\002\000\004\113\336\001\002" +
    "\000\052\064\331\065\332\066\105\067\077\070\100\071" +
    "\107\072\112\073\103\074\102\075\106\076\101\077\104" +
    "\100\075\102\111\103\074\104\110\105\114\106\113\107" +
    "\076\113\333\001\002\000\036\002\uffdc\003\005\023\156" +
    "\025\174\026\176\030\173\033\170\034\201\035\166\036" +
    "\172\037\177\040\200\113\uffdc\114\160\001\002\000\004" +
    "\113\326\001\002\000\004\050\304\001\002\000\004\050" +
    "\270\001\002\000\004\050\250\001\002\000\054\050\070" +
    "\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072" +
    "\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89" +
    "\102\246\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\113" +
    "\uff89\001\002\000\036\002\uffdc\003\005\023\156\025\174" +
    "\026\176\030\173\033\170\034\201\035\166\036\172\037" +
    "\177\040\200\113\uffdc\114\160\001\002\000\006\002\uffe8" +
    "\113\uffe8\001\002\000\030\013\057\014\062\050\065\056" +
    "\052\057\066\060\054\061\060\062\067\070\055\101\053" +
    "\110\063\001\002\000\046\066\105\067\077\070\100\071" +
    "\107\072\112\073\103\074\102\075\106\076\101\077\104" +
    "\100\075\102\111\103\074\104\110\105\114\106\113\107" +
    "\076\113\uffd1\001\002\000\016\004\027\005\034\006\025" +
    "\007\032\010\024\057\251\001\002\000\004\102\266\001" +
    "\002\000\004\057\263\001\002\000\004\111\254\001\002" +
    "\000\030\013\057\014\062\050\065\056\052\057\066\060" +
    "\054\061\060\062\067\070\055\101\053\110\063\001\002" +
    "\000\046\066\105\067\077\070\100\071\107\072\112\073" +
    "\103\074\102\075\106\076\101\077\104\100\075\102\111" +
    "\103\074\104\110\105\114\106\113\107\076\111\256\001" +
    "\002\000\030\013\057\014\062\050\065\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\004\051\260\001\002\000\034\003\005\023\156" +
    "\025\174\026\176\030\173\033\170\034\201\035\166\036" +
    "\172\037\177\040\200\113\uffdc\114\160\001\002\000\004" +
    "\113\262\001\002\000\036\002\uffc3\003\uffc3\023\uffc3\025" +
    "\uffc3\026\uffc3\030\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\113\uffc3\114\uffc3\001\002\000\004\102" +
    "\264\001\002\000\030\013\057\014\062\050\065\056\052" +
    "\057\066\060\054\061\060\062\067\070\055\101\053\110" +
    "\063\001\002\000\046\066\105\067\077\070\100\071\107" +
    "\072\112\073\103\074\102\075\106\076\101\077\104\100" +
    "\075\102\111\103\074\104\110\105\114\106\113\107\076" +
    "\111\uffc2\001\002\000\030\013\057\014\062\050\065\056" +
    "\052\057\066\060\054\061\060\062\067\070\055\101\053" +
    "\110\063\001\002\000\046\066\105\067\077\070\100\071" +
    "\107\072\112\073\103\074\102\075\106\076\101\077\104" +
    "\100\075\102\111\103\074\104\110\105\114\106\113\107" +
    "\076\111\uffc1\001\002\000\030\013\057\014\062\050\065" +
    "\056\052\057\066\060\054\061\060\062\067\070\055\101" +
    "\053\110\063\001\002\000\046\051\272\066\105\067\077" +
    "\070\100\071\107\072\112\073\103\074\102\075\106\076" +
    "\101\077\104\100\075\102\111\103\074\104\110\105\114" +
    "\106\113\107\076\001\002\000\004\113\273\001\002\000" +
    "\034\003\005\023\156\025\174\026\176\030\173\033\170" +
    "\034\201\035\166\036\172\037\177\040\200\113\uffdc\114" +
    "\160\001\002\000\004\113\275\001\002\000\040\002\uffd0" +
    "\003\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\047\276\113\uffd0" +
    "\114\uffd0\001\002\000\004\113\277\001\002\000\036\003" +
    "\005\023\156\025\174\026\176\030\173\033\170\034\201" +
    "\035\166\036\172\037\177\040\200\046\241\113\uffdc\114" +
    "\160\001\002\000\004\113\303\001\002\000\004\113\302" +
    "\001\002\000\036\002\uffce\003\uffce\023\uffce\025\uffce\026" +
    "\uffce\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\113\uffce\114\uffce\001\002\000\036\002\uffcf\003" +
    "\uffcf\023\uffcf\025\uffcf\026\uffcf\030\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\113\uffcf\114\uffcf\001" +
    "\002\000\030\013\057\014\062\050\065\056\052\057\066" +
    "\060\054\061\060\062\067\070\055\101\053\110\063\001" +
    "\002\000\046\051\306\066\105\067\077\070\100\071\107" +
    "\072\112\073\103\074\102\075\106\076\101\077\104\100" +
    "\075\102\111\103\074\104\110\105\114\106\113\107\076" +
    "\001\002\000\006\021\307\113\311\001\002\000\004\113" +
    "\323\001\002\000\036\002\uffc8\003\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\113\uffc8\114\uffc8\001\002\000\040\002\uffcb" +
    "\003\uffcb\023\uffcb\025\uffcb\026\uffcb\027\314\030\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\113\uffcb" +
    "\114\uffcb\001\002\000\042\002\uffc9\003\uffc9\021\307\023" +
    "\uffc9\025\uffc9\026\uffc9\027\314\030\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\113\uffc9\114\uffc9\001" +
    "\002\000\042\002\uffc6\003\uffc6\021\uffc6\023\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\113\uffc6\114\uffc6\001\002\000\030" +
    "\013\057\014\062\050\065\056\052\057\066\060\054\061" +
    "\060\062\067\070\055\101\053\110\063\001\002\000\046" +
    "\066\105\067\077\070\100\071\107\072\112\073\103\074" +
    "\102\075\106\076\101\077\104\100\075\102\111\103\074" +
    "\104\110\105\114\106\113\107\076\113\316\001\002\000" +
    "\034\003\005\023\156\025\174\026\176\030\173\033\170" +
    "\034\201\035\166\036\172\037\177\040\200\113\uffdc\114" +
    "\160\001\002\000\004\113\320\001\002\000\042\002\uffc5" +
    "\003\uffc5\021\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\113\uffc5\114\uffc5\001\002\000\036\002\uffca\003\uffca\023" +
    "\uffca\025\uffca\026\uffca\030\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\113\uffca\114\uffca\001\002\000" +
    "\042\002\uffc7\003\uffc7\021\uffc7\023\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\113\uffc7\114\uffc7\001\002\000\034\003\005" +
    "\023\156\025\174\026\176\030\173\033\170\034\201\035" +
    "\166\036\172\037\177\040\200\113\uffdc\114\160\001\002" +
    "\000\004\113\325\001\002\000\036\002\uffc4\003\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\030\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\113\uffc4\114\uffc4\001\002\000" +
    "\036\002\uffdc\003\005\023\156\025\174\026\176\030\173" +
    "\033\170\034\201\035\166\036\172\037\177\040\200\113" +
    "\uffdc\114\160\001\002\000\006\002\uffe7\113\uffe7\001\002" +
    "\000\006\002\uffe5\113\uffe5\001\002\000\004\113\335\001" +
    "\002\000\004\113\334\001\002\000\006\051\uffe9\113\uffe9" +
    "\001\002\000\006\051\uffea\113\uffea\001\002\000\006\051" +
    "\uffeb\113\uffeb\001\002\000\036\002\uffdc\003\005\023\156" +
    "\025\174\026\176\030\173\033\170\034\201\035\166\036" +
    "\172\037\177\040\200\113\uffdc\114\160\001\002\000\006" +
    "\002\uffe6\113\uffe6\001\002\000\006\002\uffe3\113\uffe3\001" +
    "\002\000\006\002\uffe4\113\uffe4\001\002\000\030\013\057" +
    "\014\062\050\065\056\052\057\066\060\054\061\060\062" +
    "\067\070\055\101\053\110\063\001\002\000\046\051\344" +
    "\066\105\067\077\070\100\071\107\072\112\073\103\074" +
    "\102\075\106\076\101\077\104\100\075\102\111\103\074" +
    "\104\110\105\114\106\113\107\076\001\002\000\004\113" +
    "\345\001\002\000\034\003\005\023\156\025\174\026\176" +
    "\030\173\033\170\034\201\035\166\036\172\037\177\040" +
    "\200\113\uffdc\114\160\001\002\000\004\113\347\001\002" +
    "\000\036\002\uffc0\003\uffc0\023\uffc0\025\uffc0\026\uffc0\030" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\113\uffc0\114\uffc0\001\002\000\036\002\uffcd\003\uffcd\023" +
    "\uffcd\025\uffcd\026\uffcd\030\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\113\uffcd\114\uffcd\001\002\000" +
    "\004\057\353\001\002\000\004\051\355\001\002\000\006" +
    "\051\uffaf\112\uffaf\001\002\000\006\051\uffae\112\uffae\001" +
    "\002\000\036\002\uffb6\003\uffb6\023\uffb6\025\uffb6\026\uffb6" +
    "\030\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\113\uffb6\114\uffb6\001\002\000\006\002\uffe1\113\uffe1" +
    "\001\002\000\004\057\360\001\002\000\004\112\uffa8\001" +
    "\002\000\004\112\362\001\002\000\030\013\057\014\062" +
    "\050\065\056\052\057\066\060\054\061\060\062\067\070" +
    "\055\101\053\110\063\001\002\000\046\066\105\067\077" +
    "\070\100\071\107\072\112\073\103\074\102\075\106\076" +
    "\101\077\104\100\075\102\111\103\074\104\110\105\114" +
    "\106\113\107\076\112\364\001\002\000\030\013\057\014" +
    "\062\050\065\056\052\057\066\060\054\061\060\062\067" +
    "\070\055\101\053\110\063\001\002\000\046\066\105\067" +
    "\077\070\100\071\107\072\112\073\103\074\102\075\106" +
    "\076\101\077\104\100\075\102\111\103\074\104\110\105" +
    "\114\106\113\107\076\112\366\001\002\000\030\013\057" +
    "\014\062\050\065\056\052\057\066\060\054\061\060\062" +
    "\067\070\055\101\053\110\063\001\002\000\046\051\370" +
    "\066\105\067\077\070\100\071\107\072\112\073\103\074" +
    "\102\075\106\076\101\077\104\100\075\102\111\103\074" +
    "\104\110\105\114\106\113\107\076\001\002\000\036\002" +
    "\uffb9\003\uffb9\023\uffb9\025\uffb9\026\uffb9\030\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\113\uffb9\114" +
    "\uffb9\001\002\000\006\002\uffdf\113\uffdf\001\002\000\004" +
    "\057\353\001\002\000\004\112\374\001\002\000\014\041" +
    "\375\042\u0101\043\376\044\u0102\045\377\001\002\000\004" +
    "\051\uffb4\001\002\000\004\051\uffb2\001\002\000\004\051" +
    "\uffb0\001\002\000\004\051\u0103\001\002\000\004\051\uffb3" +
    "\001\002\000\004\051\uffb1\001\002\000\036\002\uffb7\003" +
    "\uffb7\023\uffb7\025\uffb7\026\uffb7\030\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\113\uffb7\114\uffb7\001" +
    "\002\000\006\002\uffde\113\uffde\001\002\000\006\002\uffda" +
    "\113\uffda\001\002\000\006\002\uffe0\113\uffe0\001\002\000" +
    "\006\002\uffe2\113\uffe2\001\002\000\036\002\uffdc\003\005" +
    "\023\156\025\174\026\176\030\173\033\170\034\201\035" +
    "\166\036\172\037\177\040\200\113\uffdc\114\160\001\002" +
    "\000\006\002\uffdb\113\uffdb\001\002\000\042\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\020\uffed\024\uffed\046\uffed\050\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\070\uffed\101" +
    "\uffed\110\uffed\001\002\000\036\002\uffcc\003\uffcc\023\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\113\uffcc\114\uffcc\001\002\000\016" +
    "\004\027\005\034\006\025\007\032\010\024\051\u010e\001" +
    "\002\000\006\051\uffa4\112\u011a\001\002\000\004\113\u0118" +
    "\001\002\000\004\057\u0117\001\002\000\006\051\uffa6\112" +
    "\u0115\001\002\000\004\051\u0112\001\002\000\004\113\u0113" +
    "\001\002\000\036\002\uffdc\003\005\023\156\025\174\026" +
    "\176\030\173\033\170\034\201\035\166\036\172\037\177" +
    "\040\200\113\uffdc\114\160\001\002\000\006\002\uffbc\113" +
    "\uffbc\001\002\000\014\004\027\005\034\006\025\007\032" +
    "\010\024\001\002\000\004\051\uffa7\001\002\000\006\051" +
    "\uffa3\112\uffa3\001\002\000\036\002\uffdc\003\005\023\156" +
    "\025\174\026\176\030\173\033\170\034\201\035\166\036" +
    "\172\037\177\040\200\113\uffdc\114\160\001\002\000\006" +
    "\002\uffbb\113\uffbb\001\002\000\014\004\027\005\034\006" +
    "\025\007\032\010\024\001\002\000\004\051\uffa5\001\002" +
    "\000\004\050\u011d\001\002\000\016\004\027\005\034\006" +
    "\025\007\032\010\024\051\u011e\001\002\000\004\113\u0123" +
    "\001\002\000\004\051\u0120\001\002\000\004\113\u0121\001" +
    "\002\000\036\002\uffdc\003\005\023\156\025\174\026\176" +
    "\030\173\033\170\034\201\035\166\036\172\037\177\040" +
    "\200\113\uffdc\114\160\001\002\000\006\002\uffbe\113\uffbe" +
    "\001\002\000\036\002\uffdc\003\005\023\156\025\174\026" +
    "\176\030\173\033\170\034\201\035\166\036\172\037\177" +
    "\040\200\113\uffdc\114\160\001\002\000\006\002\uffbd\113" +
    "\uffbd\001\002\000\022\004\027\005\034\006\025\007\032" +
    "\010\024\015\035\031\026\114\031\001\002\000\004\113" +
    "\u0127\001\002\000\006\002\ufff8\113\ufff8\001\002\000\006" +
    "\112\ufff9\113\ufff9\001\002\000\006\112\u012a\113\u012b\001" +
    "\002\000\004\057\u012d\001\002\000\022\004\027\005\034" +
    "\006\025\007\032\010\024\015\035\031\026\114\031\001" +
    "\002\000\006\002\ufffc\113\u0125\001\002\000\006\112\ufffa" +
    "\113\ufffa\001\002\000\004\057\u0128\001\002\000\022\004" +
    "\027\005\034\006\025\007\032\010\024\015\035\031\026" +
    "\114\031\001\002\000\006\002\ufffd\113\u0125\001\002\000" +
    "\006\112\u012a\113\u0132\001\002\000\022\004\027\005\034" +
    "\006\025\007\032\010\024\015\035\031\026\114\031\001" +
    "\002\000\006\002\ufffe\113\u0125\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\012\022\003\031\010\053\005\054\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\003\031\015\001\001\000" +
    "\004\022\011\001\001\000\002\001\001\000\012\022\003" +
    "\031\010\053\013\054\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\011\001\001\000\004\035\u0128" +
    "\001\001\000\014\037\021\052\022\056\027\064\020\065" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\067\040" +
    "\070\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\022\065\035\001\001\000\002" +
    "\001\001\000\004\052\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\043\001\001" +
    "\000\004\034\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\055" +
    "\047\060\050\063\001\001\000\002\001\001\000\010\020" +
    "\055\047\145\050\063\001\001\000\002\001\001\000\010" +
    "\020\055\047\144\050\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\055\047\143\050\063\001\001\000" +
    "\002\001\001\000\010\020\055\047\141\050\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\055\036" +
    "\071\047\072\050\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\055\047\135\050" +
    "\063\001\001\000\010\020\055\047\134\050\063\001\001" +
    "\000\010\020\055\047\133\050\063\001\001\000\010\020" +
    "\055\047\132\050\063\001\001\000\010\020\055\047\131" +
    "\050\063\001\001\000\010\020\055\047\130\050\063\001" +
    "\001\000\010\020\055\047\127\050\063\001\001\000\010" +
    "\020\055\047\126\050\063\001\001\000\010\020\055\047" +
    "\125\050\063\001\001\000\010\020\055\047\124\050\063" +
    "\001\001\000\010\020\055\047\123\050\063\001\001\000" +
    "\010\020\055\047\122\050\063\001\001\000\010\020\055" +
    "\047\121\050\063\001\001\000\002\001\001\000\010\020" +
    "\055\047\116\050\063\001\001\000\010\020\055\047\115" +
    "\050\063\001\001\000\010\020\055\047\114\050\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\055\047\120\050\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\055\047\140\050\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\174\022\003\026\162\027\166\030\164\031" +
    "\160\041\156\061\161\062\170\066\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0109\001\001\000" +
    "\004\022\011\001\001\000\026\016\174\022\003\026\162" +
    "\027\166\030\164\031\160\041\u0106\061\161\062\170\066" +
    "\163\001\001\000\026\016\174\022\003\026\162\027\166" +
    "\030\164\031\160\041\u0105\061\161\062\170\066\163\001" +
    "\001\000\026\016\174\022\003\026\162\027\166\030\164" +
    "\031\160\041\u0104\061\161\062\170\066\163\001\001\000" +
    "\026\016\174\022\003\026\162\027\166\030\164\031\160" +
    "\041\u0103\061\161\062\170\066\163\001\001\000\002\001" +
    "\001\000\026\016\174\022\003\026\162\027\166\030\164" +
    "\031\160\041\370\061\161\062\170\066\163\001\001\000" +
    "\002\001\001\000\026\016\174\022\003\026\162\027\166" +
    "\030\164\031\160\041\355\061\161\062\170\066\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\055\032\233\047\234\050\063\055\235\057" +
    "\231\060\232\067\243\070\037\071\236\001\001\000\026" +
    "\016\174\022\003\026\162\027\166\030\164\031\160\041" +
    "\223\061\161\062\170\066\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\055\047\211\050\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\174\022\003\026" +
    "\162\027\166\030\164\031\160\041\214\061\161\062\170" +
    "\066\163\001\001\000\002\001\001\000\006\014\220\051" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\055" +
    "\047\227\050\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\016\174\022\003\026\162\027\166\030\164" +
    "\031\160\041\340\061\161\062\170\066\163\001\001\000" +
    "\026\016\174\022\003\026\162\027\166\030\164\031\160" +
    "\041\337\061\161\062\170\066\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\016\174\022\003\026\162" +
    "\027\166\030\164\031\160\041\327\061\161\062\170\066" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\174\022\003\026\162\027\166\030\164\031\160\041\244" +
    "\061\161\062\170\066\163\001\001\000\002\001\001\000" +
    "\010\020\055\047\246\050\063\001\001\000\002\001\001" +
    "\000\006\033\252\052\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\055\047\254" +
    "\050\063\001\001\000\002\001\001\000\012\020\055\032" +
    "\256\047\234\050\063\001\001\000\002\001\001\000\026" +
    "\016\174\022\003\026\162\027\166\030\164\031\160\041" +
    "\260\061\161\062\170\066\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\055\047" +
    "\264\050\063\001\001\000\002\001\001\000\010\020\055" +
    "\047\266\050\063\001\001\000\002\001\001\000\010\020" +
    "\055\047\270\050\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\016\174\022\003\026\162\027\166\030" +
    "\164\031\160\041\273\061\161\062\170\066\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\016\174\022\003\026\162\027\166\030\164\031\160" +
    "\041\277\055\300\061\161\062\170\066\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\055\047\304\050\063\001\001\000" +
    "\002\001\001\000\004\045\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\311\046\312\001\001\000" +
    "\006\045\320\046\321\001\001\000\002\001\001\000\010" +
    "\020\055\047\314\050\063\001\001\000\002\001\001\000" +
    "\026\016\174\022\003\026\162\027\166\030\164\031\160" +
    "\041\316\061\161\062\170\066\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\174\022\003\026\162\027\166\030\164\031" +
    "\160\041\323\061\161\062\170\066\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\174\022\003\026" +
    "\162\027\166\030\164\031\160\041\326\061\161\062\170" +
    "\066\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\174\022\003\026" +
    "\162\027\166\030\164\031\160\041\336\061\161\062\170" +
    "\066\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\055\047\342\050\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\016\174\022" +
    "\003\026\162\027\166\030\164\031\160\041\345\061\161" +
    "\062\170\066\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\353\025\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\360\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\055\047" +
    "\362\050\063\001\001\000\002\001\001\000\010\020\055" +
    "\047\364\050\063\001\001\000\002\001\001\000\010\020" +
    "\055\047\366\050\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\353\025\372\001" +
    "\001\000\002\001\001\000\004\044\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\174\022\003\026\162\027\166" +
    "\030\164\031\160\041\u0108\061\161\062\170\066\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\u010f\021\u010c\043\u0110\052\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\174\022\003\026\162\027\166\030\164\031\160\041\u0113" +
    "\061\161\062\170\066\163\001\001\000\002\001\001\000" +
    "\012\017\u010f\021\u010c\043\u0115\052\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\016\174\022\003\026" +
    "\162\027\166\030\164\031\160\041\u0118\061\161\062\170" +
    "\066\163\001\001\000\002\001\001\000\012\017\u010f\021" +
    "\u010c\043\u011a\052\u010e\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\u010f\021\u010c\043\u011e\052\u010e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\016\174\022\003\026\162\027\166\030\164\031" +
    "\160\041\u0121\061\161\062\170\066\163\001\001\000\002" +
    "\001\001\000\026\016\174\022\003\026\162\027\166\030" +
    "\164\031\160\041\u0123\061\161\062\170\066\163\001\001" +
    "\000\002\001\001\000\012\052\022\056\u0125\064\020\065" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\037" +
    "\u012b\052\022\056\027\064\020\065\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u0130\001\001\000" +
    "\014\037\u012f\052\022\056\027\064\020\065\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\037\u0132\052" +
    "\022\056\027\064\020\065\032\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    PistaInst instruccion;

    public PistaInst getInstruccion(){
            return instruccion;
        }

    public void syntax_error(Symbol s){
         System.out.println(s  );
        String lexema = s.value.toString();
        int columna =  s.right;
        int fila = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FINALERROR ::= error 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALERROR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ERRORSENTENCE ::= FINALERROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORSENTENCE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ERRORSENTENCE ::= ERRORSENTENCE FINALERROR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ERRORSENTENCE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listaExpresion ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Expresion> ex= new ArrayList();
                                                                ex.add(exp);
                                                                RESULT= ex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // listaExpresion ::= listaExpresion COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int lsexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expresion> lsexp = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lsexp.add(exp);
                                                                RESULT= lsexp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primitivas ::= BOOLT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.BOOL,true, pleft, pright);        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primitivas ::= BOOLF 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.BOOL,false, pleft, pright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primitivas ::= CHAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.CHAR,(char)p, pleft, pright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primitivas ::= CADENA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.STRING, p.toString(), pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // primitivas ::= ENTERO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.INT,(Integer)p, pleft,pright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // primitivas ::= DECIMAL 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.DOUBLE,(Double)p, pleft, pright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // primitivas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identificador(p.toString(), pleft, pright);              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitivas",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= IDENTIFICADOR PARABRE PARCIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = (Expresion)new LlamadaFuncion(id.toString(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= IDENTIFICADOR PARABRE listaExpresion PARCIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expresion> e = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Expresion)new LlamadaFuncion(id.toString(), e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= PARABRE expresion PARCIERRA 
            {
              Expresion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= expresion XOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.XOR,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NOR,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.OR,  derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NAND,derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.AND, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= expresion NOIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.NOI_GUAL, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= expresion IGUAL IGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.IGUAL_IGUAL, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_IGUA_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_IGUA_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MENOR_QUE, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MAYOR_QUE, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MODULO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= expresion POT expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.POTENCIA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= expresion DIV expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.DIVISION, derleft, derright ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= expresion ASTERISCO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.MULTIPLICACION, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.RESTA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int izleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion iz = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, iz, Operacion.Operador.SUMA, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= ESNULO expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.NULO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= NOT expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.NOT, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion der = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Operacion(der, der, Operacion.Operador.MENOS_UNARIO, derleft, derright );  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= primitivas 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (Expresion) exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= expr 
            {
              Expresion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= (Expresion) exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametro ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parametro((Simbolo.Tipo)tipo, id.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // declaracionParametro ::= sentenciaError 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracionParametro ::= sentenciaError COMA declaracionParametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracionParametro ::= parametro 
            {
              ArrayList<Parametro> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object parametro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Parametro> params = new ArrayList(); 
                                                                        params.add((Parametro)parametro);
                                                                        RESULT = params;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // declaracionParametro ::= parametro COMA declaracionParametro 
            {
              ArrayList<Parametro> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(params!=null){
                                                                                        params.add((Parametro)param); 
                                                                                        RESULT = params;
                                                                                    }else{
                                                                                        RESULT= null;
                                                                                    }
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionParametro",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // notas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    String nota = Nota.ComprobarNota(id.toString());
                    if(nota!= null){
                        RESULT = nota;
                    }else{
                        RESULT = null;//---------------
                    }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("notas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // num ::= DECIMAL 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= Simbolo.Tipo.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // num ::= ENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= Simbolo.Tipo.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parLongitud ::= declaracionesArr 
            {
              Expresion RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = (Expresion) arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parLongitud ::= CADENA 
            {
              Expresion RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Primitivo(Simbolo.Tipo.STRING, cadena.toString(),cadenaleft, cadenaright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parLongitud ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identificador(p.toString(),pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parLongitud",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parSumarizar ::= declaracionesArr 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = arr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parSumarizar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parSumarizar ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Identificador(p.toString(),pleft, pright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parSumarizar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // formaOrdenar ::= PRIMOS 
            {
              String RESULT =null;
		RESULT = "primos";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // formaOrdenar ::= IMPARES 
            {
              String RESULT =null;
		RESULT = "impares";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // formaOrdenar ::= PARES 
            {
              String RESULT =null;
		RESULT = "pares";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // formaOrdenar ::= DESCENDENTE 
            {
              String RESULT =null;
		RESULT = "descendente";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // formaOrdenar ::= ASCENDENTE 
            {
              String RESULT =null;
		RESULT = "ascendente";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formaOrdenar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MetodoFuncionNative ::= LONGITUD PARABRE parLongitud PARCIERRA 
            {
              Instruccion RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion sum = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                        RESULT = new Longitud(sum);
                                                                                    
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MetodoFuncionNative ::= SUMARIZAR PARABRE parSumarizar PARCIERRA 
            {
              Instruccion RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                        RESULT = new Sumarizar((Expresion) sum);
                                                                                     
                                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MetodoFuncionNative ::= ORDENAR PARABRE parSumarizar COMA formaOrdenar PARCIERRA 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Ordenar((Expresion)exp,f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MetodoFuncionNative ::= ESPERAR PARABRE num COMA num PARCIERRA 
            {
              Instruccion RESULT =null;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ms = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int canalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int canalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object canal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Esperar((Integer)ms, (Integer)canal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MetodoFuncionNative ::= REPRODUCIR PARABRE notas COMA expresion COMA expresion COMA expresion PARCIERRA 
            {
              Instruccion RESULT =null;
		int notaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int notaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nota = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Reproducir(nota.toString(), exp1,exp2, exp3 );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncionNative",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MetodoFuncion ::= VOID PRINCIPAL PARABRE PARCIERRA LN sentencias 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MetodoFuncion ::= VOID IDENTIFICADOR PARABRE PARCIERRA LN sentencias 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Metodo(id.toString(), null, (ArrayList<Instruccion>)ls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MetodoFuncion ::= VOID IDENTIFICADOR PARABRE declaracionParametro PARCIERRA LN sentencias 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Metodo(id.toString(), params,(ArrayList<Instruccion>)ls ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MetodoFuncion ::= tipos IDENTIFICADOR PARABRE PARCIERRA LN sentencias 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Funcion(id.toString(), null,(ArrayList<Instruccion>) ls, (Simbolo.Tipo)tipo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MetodoFuncion ::= tipos IDENTIFICADOR PARABRE declaracionParametro PARCIERRA LN sentencias 
            {
              Instruccion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Parametro> param = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> ls = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Funcion(id.toString(), param, (ArrayList<Instruccion>)ls, (Simbolo.Tipo)tipo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // hacerMientrasSentencia ::= HACER sentencias LN MIENTRAS PARABRE expresion PARCIERRA 
            {
              Instruccion RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Instruccion> list = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoWhile(expr,list);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacerMientrasSentencia",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mientrasSentecia ::= MIENTRAS PARABRE expresion PARCIERRA LN sentencias LN 
            {
              Instruccion RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> list = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While( expr,list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mientrasSentecia",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacionesFor ::= IDENTIFICADOR IGUAL expresion 
            {
              DeclaracionFor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionFor(null, id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionesFor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacionesFor ::= tipos IDENTIFICADOR IGUAL expresion 
            {
              DeclaracionFor RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo.Tipo tipo = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionFor((Simbolo.Tipo)tipo, id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionesFor",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forSentencia ::= PARA PARABRE asignacionesFor PUNTOYCOMA expresion PUNTOYCOMA decrementosuma PARCIERRA sentencias LN 
            {
              Instruccion RESULT =null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		DeclaracionFor asign = (DeclaracionFor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecIncremento dec = (DecIncremento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new For(asign, expr, dec, sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentencia",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // defaultOp ::= DEFAULT LN sentencias LN 
            {
              Default RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Default(sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("defaultOp",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // caseFinal ::= CASE expresion LN sentencias LN 
            {
              Case RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Case((Expresion)exp, (ArrayList<Instruccion>)sent); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseFinal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // caselist ::= caseFinal 
            {
              ArrayList<Case> RESULT =null;
		int casefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case casef = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Case> cases = new ArrayList();
                                        cases.add(casef);
                                        RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caselist ::= caselist caseFinal 
            {
              ArrayList<Case> RESULT =null;
		int casesFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Case> casesF = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case casef = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                        casesF.add(casef);
                                        RESULT = casesF; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caselist",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA defaultOp 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Default def = (Default)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SwitchInstruccion(exp, null, def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LN caselist 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int caselsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caselsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Case> casels = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new SwitchInstruccion(exp, casels, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LN caselist defaultOp 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caselsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Case> casels = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Default def = (Default)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new SwitchInstruccion(exp, casels, def); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switchsentencia ::= SWITCH PARABRE expresion PARCIERRA LN 
            {
              Instruccion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SwitchInstruccion(exp, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchsentencia",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BREAKSENTENCE ::= SALIR LN 
            {
              Object RESULT =null;
		RESULT= new Salir();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKSENTENCE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTINUESENTENCE ::= CONTINUAR LN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUESENTENCE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LN sentencias LN ELSE LN sentenciaIfElse LN 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentElseIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentElseIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaIf sentElseIf = (SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SentenciaIf(exp, sent, null,new SentenciaIfElse(sentElseIf)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LN sentencias LN ELSE LN sentencias LN 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sentElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sentElse = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SentenciaIf( exp, sent,new SentenciaElse(sentElse), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaIfElse ::= IF PARABRE expresion PARCIERRA LN sentencias LN 
            {
              SentenciaIf RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Instruccion> sent = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new SentenciaIf(exp, sent, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIfElse",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamadaAsignacionSentencias ::= IDENTIFICADOR IGUAL expresion 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(id.toString(), (Expresion)exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaAsignacionSentencias",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaID ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> ids = new ArrayList();
                             ids.add(id.toString());
                                RESULT = ids;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaID ::= listaID COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int lsIdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsIdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> lsIds = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lsIds.add(id.toString());
                                                RESULT = lsIds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionVar ::= declaraVar 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (Declaracion)dec;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionVar ::= declaraVar IGUAL expresion 
            {
              Instruccion RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion dec = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Asignacion((Declaracion)dec, exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaraVar ::= KEEP VAR tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaracion(idList,tip, true );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaraVar ::= VAR tipos listaID 
            {
              Instruccion RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Simbolo.Tipo tip = (Simbolo.Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> idList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Declaracion(idList,tip, false );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraVar",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaSentencias ::= sentencias 
            {
              ArrayList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaSentencias ::= sentencias listaSentencias 
            {
              ArrayList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSentencias",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias ::= MetodoFuncionNative sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int funNatvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funNatvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion funNatva = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(funNatva);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias ::= ERRORSENTENCE LN sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= sentLs;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        RESULT =instrucciones;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencias ::= MENSAJE PARABRE expr PARCIERRA sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(new Mensaje(exp));
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias ::= RETURNSENTENCE sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencias ::= BREAKSENTENCE sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencias ::= CONTINUESENTENCE sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add((Instruccion)sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencias ::= hacerMientrasSentencia sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencias ::= mientrasSentecia sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencias ::= tabList forSentencia sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencias ::= tabList switchsentencia sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencias ::= tabList sentenciaIfElse sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaIf sent = (SentenciaIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencias ::= tabList decrementosuma LN sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecIncremento sent = (DecIncremento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencias ::= tabList llamadaAsignacionSentencias LN sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencias ::= tabList declaracionVar sentencias 
            {
              ArrayList<Instruccion> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion sent = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentLsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentLsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> sentLs = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    ArrayList<Instruccion> instrucciones = new ArrayList();
                                                                        instrucciones.add(sent);
                                                                        instrucciones.addAll(sentLs);
                                                                        RESULT = instrucciones; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decrementosuma ::= expresion LN 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DecIncremento(exp, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // decrementosuma ::= expresion MENOSMENOS LN 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.menosmenos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decrementosuma ::= expresion SUMASUMA LN 
            {
              DecIncremento RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DecIncremento(exp, DecIncremento.TipoDecIncremento.masmas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementosuma",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tabList ::= TAB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tabList ::= TAB tabList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tabList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipos ::= SCADENA 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipos ::= SCARACTER 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.CHAR;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipos ::= SBOOLEAN 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.BOOL;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipos ::= SDOBLE 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.DOUBLE;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipos ::= SENTERO 
            {
              Simbolo.Tipo RESULT =null;
		RESULT=Simbolo.Tipo.STRING;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MetodoFuncioDec ::= MetodoFuncion 
            {
              Instruccion RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion met = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= met;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncioDec",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MetodoFuncioDec ::= KEEP MetodoFuncion 
            {
              Instruccion RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion met = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Class c = met.getClass();
                                                    if(c.getName().contains("Metodo")){
                                                        ((Metodo)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }else if(c.getName().contains("Funcion")){
                                                        ((Funcion)met).setIsKeep(true);
                                                        RESULT= met;
                                                    }
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodoFuncioDec",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpPistaP ::= TAB declaracionVar 
            {
              Instruccion RESULT =null;
		int decVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion decVar = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("cuerpPistaP-declaracionVar"); RESULT= decVar; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpPistaP",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpPistaP ::= MetodoFuncioDec 
            {
              Instruccion RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion fun = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("cuerpPistaP-MetodoFuncioDec"); RESULT= fun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpPistaP",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpoPista ::= cuerpPistaP 
            {
              ArrayList<Instruccion> RESULT =null;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion cuerpoP = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Instruccion> sentencias = new ArrayList();
                                                                 sentencias.add(cuerpoP);   
                                                                RESULT = sentencias;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPista",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpoPista ::= cuerpoPista LN cuerpPistaP LN 
            {
              ArrayList<Instruccion> RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Instruccion> cuerpo = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion cuerpoP = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    cuerpo.add(cuerpoP);
                                                                    RESULT= cuerpo;
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPista",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // extiende ::= IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<String> ids = new ArrayList();
                                          ids.add(id.toString()); 
                                          RESULT = ids;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // extiende ::= extiende COMA IDENTIFICADOR 
            {
              ArrayList<String> RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ext.add(id.toString());  
                                                   RESULT= ext;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extiende",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pista ::= PISTA ERRORSENTENCE LN cuerpoPista 
            {
              PistaInst RESULT =null;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PistaInst(null,cPista, null );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pista ::= PISTA ERRORSENTENCE EXTIENDE extiende LN cuerpoPista 
            {
              PistaInst RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PistaInst(null,cPista, ext );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pista ::= PISTA IDENTIFICADOR LN cuerpoPista 
            {
              PistaInst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PistaInst(id.toString(),cPista, null );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pista ::= PISTA IDENTIFICADOR EXTIENDE extiende LN cuerpoPista 
            {
              PistaInst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ext = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cPistaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cPistaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Instruccion> cPista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new PistaInst(id.toString(),cPista, ext );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pista",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ERRORSENTENCE LN S 
            {
              PistaInst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PistaInst s = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.instruccion=s; RESULT= s; System.out.println("s error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= pista 
            {
              PistaInst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PistaInst s = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.instruccion=s; RESULT= s;  System.out.println("s");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PistaInst start_val = (PistaInst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

